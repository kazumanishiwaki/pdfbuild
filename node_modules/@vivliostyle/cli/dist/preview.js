"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.preview = void 0;
const chokidar_1 = __importDefault(require("chokidar"));
const upath_1 = __importDefault(require("upath"));
const browser_1 = require("./browser");
const builder_1 = require("./builder");
const config_1 = require("./config");
const server_1 = require("./server");
const util_1 = require("./util");
let timer;
async function preview(cliFlags) {
    var _a, _b;
    util_1.startLogging('Collecting preview config');
    const loadedConf = config_1.collectVivliostyleConfig(cliFlags);
    const { vivliostyleConfig, vivliostyleConfigPath } = loadedConf;
    cliFlags = loadedConf.cliFlags;
    const context = vivliostyleConfig
        ? upath_1.default.dirname(vivliostyleConfigPath)
        : util_1.cwd;
    if (!cliFlags.input && !vivliostyleConfig) {
        // Empty input, open Viewer start page
        cliFlags.input = 'data:,';
    }
    let config = await config_1.mergeConfig(cliFlags, 
    // Only show preview of first entry
    vivliostyleConfig === null || vivliostyleConfig === void 0 ? void 0 : vivliostyleConfig[0], context);
    util_1.startLogging('Preparing preview');
    // build artifacts
    if (config.manifestPath) {
        await builder_1.compile(config);
        await builder_1.copyAssets(config);
    }
    const { viewerFullUrl } = await server_1.prepareServer({
        input: ((_b = (_a = config.manifestPath) !== null && _a !== void 0 ? _a : config.webbookEntryPath) !== null && _b !== void 0 ? _b : config.epubOpfPath),
        workspaceDir: config.workspaceDir,
        httpServer: config.httpServer,
        viewer: config.viewer,
        size: config.size,
        cropMarks: config.cropMarks,
        bleed: config.bleed,
        cropOffset: config.cropOffset,
        css: config.css,
        style: config.customStyle,
        userStyle: config.customUserStyle,
        singleDoc: config.singleDoc,
        quick: config.quick,
    });
    const { browserType, executableBrowser } = config;
    util_1.debug(`Executing browser path: ${executableBrowser}`);
    if (!browser_1.checkBrowserAvailability(executableBrowser)) {
        if (browser_1.isPlaywrightExecutable(executableBrowser)) {
            // The browser isn't downloaded first time starting CLI so try to download it
            await browser_1.downloadBrowser(browserType);
        }
        else {
            // executableBrowser seems to be specified explicitly
            throw new Error(`Cannot find the browser. Please check the executable browser path: ${executableBrowser}`);
        }
    }
    const browser = await browser_1.launchBrowser({
        browserType,
        executablePath: executableBrowser,
        headless: false,
        noSandbox: !config.sandbox,
        disableWebSecurity: !config.viewer,
    });
    const page = await browser.newPage({ viewport: null });
    await page.goto(viewerFullUrl);
    util_1.stopLogging('Up and running ([ctrl+c] to quit)', 'ðŸš€');
    function reloadConfig(path) {
        clearTimeout(timer);
        timer = setTimeout(async () => {
            util_1.startLogging(`Config file change detected. Reloading ${path}`);
            // reload vivliostyle config
            const loadedConf = config_1.collectVivliostyleConfig(cliFlags);
            const { vivliostyleConfig } = loadedConf;
            config = await config_1.mergeConfig(cliFlags, vivliostyleConfig === null || vivliostyleConfig === void 0 ? void 0 : vivliostyleConfig[0], context);
            // build artifacts
            if (config.manifestPath) {
                await builder_1.compile(config, { reload: true });
                await builder_1.copyAssets(config);
            }
            page.reload();
            util_1.logSuccess(`Reloaded ${path}`);
        }, 2000);
    }
    function handleChangeEvent(path) {
        clearTimeout(timer);
        timer = setTimeout(async () => {
            util_1.startLogging(`Rebuilding ${path}`);
            // build artifacts
            if (config.manifestPath) {
                await builder_1.compile(config, { reload: true });
                await builder_1.copyAssets(config);
            }
            page.reload();
            util_1.logSuccess(`Built ${path}`);
        }, 2000);
    }
    if (util_1.isUrlString(config.input.entry)) {
        return;
    }
    chokidar_1.default
        .watch('**', {
        ignored: (path) => {
            if (/^node_modules$|^\.git/.test(upath_1.default.basename(path))) {
                return true;
            }
            if (!util_1.pathEquals(config.entryContextDir, config.workspaceDir) &&
                util_1.pathStartsWith(path, config.workspaceDir)) {
                return true; // ignore saved intermediate files
            }
            if (config.manifestAutoGenerate &&
                util_1.pathEquals(path, config.manifestPath)) {
                return true; // ignore generated pub-manifest
            }
            if (config.entries.length &&
                /\.(md|markdown|html?|xhtml|xht)$/i.test(path) &&
                !config.entries.find((entry) => util_1.pathEquals(path, entry.source))) {
                return true; // ignore md or html files not in entries source
            }
            if (config.themeIndexes.find((theme) => (theme.type === 'file' || theme.type === 'package') &&
                !util_1.pathEquals(theme.destination, theme.location) &&
                (theme.type === 'file'
                    ? util_1.pathEquals(path, theme.destination)
                    : util_1.pathStartsWith(path, theme.destination)))) {
                return true; // ignore copied theme files
            }
            return false;
        },
        cwd: config.entries.length ? context : config.entryContextDir,
        ignoreInitial: true,
    })
        .on('all', (event, path) => {
        if (util_1.pathEquals(upath_1.default.join(config.entryContextDir, path), config.input.entry) ||
            /\.(md|markdown|html?|xhtml|xht|css|jpe?g|png|gif|svg)$/i.test(path)) {
            handleChangeEvent(path);
        }
        else if (util_1.pathEquals(path, upath_1.default.basename(vivliostyleConfigPath))) {
            reloadConfig(path);
        }
    });
}
exports.preview = preview;
//# sourceMappingURL=preview.js.map
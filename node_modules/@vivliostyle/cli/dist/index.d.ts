import * as vite from 'vite';
import { VivliostyleInlineConfig } from './config/schema.js';
export { StructuredDocument, StructuredDocumentSection, VivliostyleConfigSchema } from './config/schema.js';
export { createVitePlugin } from './vite-adapter.js';
import '@vivliostyle/vfm';
import 'unified';
import 'valibot';

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
type PublicationContexts = [] | ['https://schema.org'] | [
    'https://schema.org',
    'https://www.w3.org/ns/pub-context',
    ...(string | {
        language: BCP47LanguageTag;
        direction?: never;
        [k: string]: unknown;
    } | {
        direction: 'ltr' | 'rtl';
        language?: never;
        [k: string]: unknown;
    } | {
        language: BCP47LanguageTag;
        direction: 'ltr' | 'rtl';
        [k: string]: unknown;
    } | {
        language?: never;
        direction?: never;
        [k: string]: unknown;
    })[]
];
type BCP47LanguageTag = string;
type URL = string;
type UniqueStrings = string | string[];
type ListsOfItemList = SchemaOrgItemListObject | SchemaOrgItemListObject[];
type LocalizableStringOrObject = string | (string | LocalizableStringObject)[] | LocalizableStringObject;
type Contributor = string | (string | ContributorObject)[] | ContributorObject;
type URLs = string | string[];
type Duration = string;
type Languages = BCP47LanguageTag | BCP47LanguageTag[];
type Dates = string;
type ResourceCategorization = (URL | PublicationLinks) | (URL | PublicationLinks)[];
interface PublicationManifest$1 {
    '@context': PublicationContexts;
    type?: string | string[];
    conformsTo: URL | URL[];
    id?: string;
    abridged?: boolean;
    accessMode?: UniqueStrings;
    accessModeSufficient?: ListsOfItemList;
    accessibilityFeature?: UniqueStrings;
    accessibilityHazard?: UniqueStrings;
    accessibilitySummary?: LocalizableStringOrObject;
    artist?: Contributor;
    author?: Contributor;
    colorist?: Contributor;
    contributor?: Contributor;
    creator?: Contributor;
    editor?: Contributor;
    illustrator?: Contributor;
    inker?: Contributor;
    letterer?: Contributor;
    penciler?: Contributor;
    publisher?: Contributor;
    readBy?: Contributor;
    translator?: Contributor;
    url?: URLs;
    duration?: Duration;
    inLanguage?: Languages;
    dateModified?: Dates;
    datePublished?: Dates;
    name?: LocalizableStringOrObject;
    readingOrder?: ResourceCategorization;
    resources?: ResourceCategorization;
    links?: ResourceCategorization;
    readingProgression?: 'ltr' | 'rtl';
    [k: string]: unknown;
}
interface SchemaOrgItemListObject {
    type: 'ItemList' | string[];
    itemListElement: string[];
    [k: string]: unknown;
}
interface LocalizableStringObject {
    value: string;
    language?: BCP47LanguageTag;
    [k: string]: unknown;
}
interface ContributorObject {
    name: LocalizableStringOrObject;
    id?: URL;
    type?: ('Person' | 'Organization') | string[];
    url?: URL;
    identifier?: string[];
    [k: string]: unknown;
}
interface PublicationLinks {
    type?: 'LinkedResource' | string[];
    url: URL;
    encodingFormat?: string;
    name?: LocalizableStringOrObject;
    description?: string | LocalizableStringObject;
    rel?: string | string[];
    integrity?: string;
    duration?: Duration;
    alternate?: ResourceCategorization;
    [k: string]: unknown;
}

/** @hidden */
type PublicationManifest = PublicationManifest$1;
/**
 * Build publication file(s) from the given configuration.
 *
 * ```ts
 * import { build } from '@vivliostyle/cli';
 * build({
 *   configPath: './vivliostyle.config.js',
 *   logLevel: 'silent',
 * });
 * ```
 *
 * @param options
 * @returns
 */
declare function build(options: VivliostyleInlineConfig): Promise<void>;
/**
 * Initialize a new vivliostyle.config.js file.
 *
 * @param options
 * @returns
 */
declare function init(options: VivliostyleInlineConfig): Promise<void>;
/**
 * Open a browser for previewing the publication.
 *
 * @param options
 * @returns
 */
declare function preview(options: VivliostyleInlineConfig): Promise<vite.ViteDevServer>;

export { type PublicationManifest, build, init, preview };

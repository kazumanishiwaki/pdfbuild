/// <reference types="node" />
import { ErrorObject } from 'ajv';
import debugConstructor from 'debug';
import fs from 'fs';
export declare const debug: debugConstructor.Debugger;
export declare const cwd: string;
export declare let beforeExitHandlers: (() => void)[];
export declare function startLogging(text?: string): void;
export declare function stopLogging(text?: string, symbol?: string): void;
export declare function log(...obj: any): void;
export declare function logUpdate(...obj: string[]): void;
export declare function logSuccess(...obj: string[]): void;
export declare function logError(...obj: string[]): void;
export declare function logWarn(...obj: string[]): void;
export declare function logInfo(...obj: string[]): void;
export declare class DetailError extends Error {
    detail: string | undefined;
    constructor(message: string | undefined, detail: string | undefined);
}
export declare function gracefulError<T extends Error>(err: T): void;
export declare function filterRelevantAjvErrors(allErrors: ErrorObject[]): ErrorObject[];
export declare function readJSON(path: string): any;
export declare function statFileSync(filePath: string): fs.Stats;
export declare function inflateZip(filePath: string, dest: string): Promise<void>;
export declare function useTmpDirectory(): Promise<[string, () => void]>;
export declare function touchTmpFile(path: string): Promise<() => void>;
export declare function pathEquals(path1: string, path2: string): boolean;
export declare function pathStartsWith(path1: string, path2: string): boolean;
export declare function isUrlString(str: string): boolean;
export declare function findAvailablePort(): Promise<number>;
export declare function checkContainerEnvironment(): boolean;
//# sourceMappingURL=util.d.ts.map
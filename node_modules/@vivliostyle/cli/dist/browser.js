"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.downloadBrowser = exports.isPlaywrightExecutable = exports.checkBrowserAvailability = exports.getFullBrowserName = exports.getExecutableBrowserPath = exports.launchBrowser = void 0;
const fs_1 = __importDefault(require("fs"));
const playwright = __importStar(require("playwright-core"));
const server_1 = require("playwright-core/lib/server");
const util_1 = require("./util");
async function launchBrowser({ browserType, executablePath, headless, noSandbox, disableWebSecurity, disableDevShmUsage, }) {
    const options = browserType === 'chromium'
        ? {
            executablePath,
            chromiumSandbox: !noSandbox,
            // We don't use Playwright's preset for headless Chrome to set `headless: 'chrome'` option
            // https://github.com/vivliostyle/vivliostyle-cli/pull/280
            headless: false,
            args: [
                // Preset of Playwright: https://github.com/microsoft/playwright/blob/e69c3f12e6f07ee9e737446ba22f20cb669d7211/packages/playwright-core/src/server/chromium/chromium.ts#L287-L294
                ...(headless
                    ? [
                        '--headless=chrome',
                        '--hide-scrollbars',
                        '--mute-audio',
                        '--blink-settings=primaryHoverType=2,availableHoverTypes=2,primaryPointerType=4,availablePointerTypes=4',
                    ]
                    : []),
                '--allow-file-access-from-files',
                disableWebSecurity ? '--disable-web-security' : '',
                disableDevShmUsage ? '--disable-dev-shm-usage' : '',
            ],
        }
        : // TODO: Investigate appropriate settings on Firefox & Webkit
            { executablePath, headless };
    const browser = await playwright[browserType].launch(options);
    util_1.beforeExitHandlers.push(() => {
        browser.close();
    });
    return browser;
}
exports.launchBrowser = launchBrowser;
function getExecutableBrowserPath(browserType) {
    return playwright[browserType].executablePath();
}
exports.getExecutableBrowserPath = getExecutableBrowserPath;
function getFullBrowserName(browserType) {
    return {
        chromium: 'Chromium',
        firefox: 'Firefox',
        webkit: 'Webkit',
    }[browserType];
}
exports.getFullBrowserName = getFullBrowserName;
function checkBrowserAvailability(path) {
    return fs_1.default.existsSync(path);
}
exports.checkBrowserAvailability = checkBrowserAvailability;
function isPlaywrightExecutable(path) {
    return server_1.registry
        .executables()
        .some((exe) => { var _a; return util_1.pathEquals((_a = exe.executablePath()) !== null && _a !== void 0 ? _a : '', path); });
}
exports.isPlaywrightExecutable = isPlaywrightExecutable;
async function downloadBrowser(browserType) {
    const executable = server_1.registry.findExecutable(browserType);
    util_1.logInfo('Rendering browser is not installed yet. Downloading now...');
    util_1.stopLogging();
    await server_1.registry.install([executable], false);
    util_1.logSuccess(`Successfully downloaded browser`);
    util_1.startLogging();
    return executable.executablePath();
}
exports.downloadBrowser = downloadBrowser;
//# sourceMappingURL=browser.js.map
import { InputFormat, ManuscriptMediaType } from './input';
import { OutputFormat } from './output';
import type { BrowserType, VivliostyleConfigEntry } from './schema/vivliostyleConfig.schema';
import { PageSize } from './server';
export declare type ParsedTheme = UriTheme | FileTheme | PackageTheme;
export interface UriTheme {
    type: 'uri';
    name: string;
    location: string;
}
export interface FileTheme {
    type: 'file';
    name: string;
    location: string;
    destination: string;
}
export interface PackageTheme {
    type: 'package';
    name: string;
    location: string;
    destination: string;
    style: string;
}
export interface ManuscriptEntry {
    type: ManuscriptMediaType;
    title?: string;
    theme?: ParsedTheme;
    source: string;
    target: string;
    rel?: string | string[];
}
export interface ContentsEntry {
    rel: 'contents';
    title?: string;
    theme?: ParsedTheme;
    target: string;
}
export declare type ParsedEntry = ManuscriptEntry | ContentsEntry;
export interface CliFlags {
    input?: string;
    configPath?: string;
    targets?: Pick<OutputFormat, 'path' | 'format'>[];
    theme?: string;
    size?: string;
    cropMarks?: boolean;
    bleed?: string;
    cropOffset?: string;
    css?: string;
    style?: string;
    userStyle?: string;
    singleDoc?: boolean;
    quick?: boolean;
    pressReady?: boolean;
    title?: string;
    author?: string;
    language?: string;
    verbose?: boolean;
    timeout?: number;
    renderMode?: 'local' | 'docker';
    preflight?: 'press-ready' | 'press-ready-local';
    preflightOption?: string[];
    sandbox?: boolean;
    executableBrowser?: string;
    image?: string;
    http?: boolean;
    viewer?: string;
    browser?: 'chromium' | 'firefox' | 'webkit';
    /** @deprecated */ executableChromium?: string;
}
export interface WebPublicationManifestConfig {
    manifestPath: string;
    manifestAutoGenerate: {
        title: string;
        author: string;
    } | null;
}
export interface EpubManifestConfig {
    epubOpfPath: string;
}
export interface WebbookEntryConfig {
    webbookEntryPath: string;
}
export declare type ManifestConfig = XOR<[
    WebPublicationManifestConfig,
    WebbookEntryConfig,
    EpubManifestConfig
]>;
export declare type MergedConfig = {
    entryContextDir: string;
    workspaceDir: string;
    entries: ParsedEntry[];
    input: InputFormat;
    outputs: OutputFormat[];
    themeIndexes: ParsedTheme[];
    includeAssets: string[];
    exportAliases: {
        source: string;
        target: string;
    }[];
    size: PageSize | undefined;
    cropMarks: boolean;
    bleed: string | undefined;
    cropOffset: string | undefined;
    css: string | undefined;
    customStyle: string | undefined;
    customUserStyle: string | undefined;
    singleDoc: boolean;
    quick: boolean;
    language: string | null;
    readingProgression: 'ltr' | 'rtl' | undefined;
    vfmOptions: {
        hardLineBreaks: boolean;
        disableFormatHtml: boolean;
    };
    cover: string | undefined;
    verbose: boolean;
    timeout: number;
    sandbox: boolean;
    executableBrowser: string;
    browserType: BrowserType;
    image: string;
    httpServer: boolean;
    viewer: string | undefined;
} & ManifestConfig;
export declare function validateTimeoutFlag(val: string): number;
export declare function contextResolve(context: string, loc: string | undefined): string | undefined;
export declare function parseTheme(locator: string | undefined, contextDir: string, workspaceDir: string): ParsedTheme | undefined;
export declare function collectVivliostyleConfig<T extends CliFlags>(cliFlags: T): {
    cliFlags: T;
    vivliostyleConfig?: VivliostyleConfigEntry[];
    vivliostyleConfigPath: string;
};
export declare function mergeConfig<T extends CliFlags>(cliFlags: T, config: VivliostyleConfigEntry | undefined, context: string): Promise<MergedConfig>;
export declare function checkUnusedCliFlags<T extends CliFlags>(config: MergedConfig, cliFlags: T): void;
//# sourceMappingURL=config.d.ts.map
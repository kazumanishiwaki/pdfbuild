{"version":3,"sources":["../../src/commands/build.ts","../../src/commands/build.parser.ts"],"sourcesContent":["import process from 'node:process';\nimport { build } from '../core/build.js';\nimport { Logger } from '../logger.js';\nimport { gracefulError, isInContainer } from '../util.js';\nimport { setupBuildParserProgram } from './build.parser.js';\nimport { parseFlagsToInlineConfig } from './cli-flags.js';\n\ntry {\n  let inlineConfig = parseFlagsToInlineConfig(\n    process.argv,\n    setupBuildParserProgram,\n  );\n  if (isInContainer()) {\n    inlineConfig = JSON.parse(process.env.VS_CLI_BUILD_PDF_OPTIONS!);\n    Logger.debug('bypassedPdfBuilderOption %O', inlineConfig);\n  }\n  await build(inlineConfig);\n} catch (err) {\n  if (err instanceof Error) {\n    gracefulError(err);\n  }\n}\n","import { Command, Option } from 'commander';\n\nexport function setupBuildParserProgram(): Command {\n  // Provide an order-sensitive command parser\n  // ex: \"-o foo -o bar -f baz\"\n  //    → [{path: \"foo\"}, {path:\"bar\", format: \"baz\"}]\n  // ex: \"-f foo -o bar -o baz -f piyo\"\n  //    → [{path: \"bar\", format: \"foo\"}, {path: \"baz\", format: \"piyo\"}]\n  const targets: {\n    path?: string;\n    format?: string;\n  }[] = [];\n  const outputOptionProcessor = (\n    value: string,\n    previous?: string[],\n  ): string[] => {\n    if (targets.length === 0 || 'path' in targets[targets.length - 1]) {\n      targets.push({ path: value });\n    } else {\n      targets[targets.length - 1].path = value;\n    }\n    return [...(previous || []), value];\n  };\n  const formatOptionProcessor = (\n    value: string,\n    previous?: string[],\n  ): string[] => {\n    if (targets.length === 0 || 'format' in targets[targets.length - 1]) {\n      targets.push({ format: value });\n    } else {\n      targets[targets.length - 1].format = value;\n    }\n    return [...(previous || []), value];\n  };\n\n  const program = new Command();\n  program\n    .name('vivliostyle build')\n    .description('build and create PDF file')\n    .arguments('[input]')\n    .option(\n      '-c, --config <config_file>',\n      'path to vivliostyle.config.js [vivliostyle.config.js]',\n    )\n    .option(\n      '-o, --output <path>',\n      `specify output file name or directory [<title>.pdf]\nThis option can be specified multiple, then each -o options can be supplied one -f option.\nex: -o output1 -f webpub -o output2.pdf -f pdf`,\n      outputOptionProcessor,\n    )\n    .option(\n      '-f, --format <format>',\n      `specify output format corresponding output target\nIf an extension is specified on -o option, this field will be inferenced automatically.`,\n      formatOptionProcessor,\n    )\n    .option(\n      '-s, --size <size>',\n      `output pdf size\npreset: A5, A4, A3, B5, B4, JIS-B5, JIS-B4, letter, legal, ledger\ncustom(comma separated): 182mm,257mm or 8.5in,11in`,\n    )\n    .option('-m, --crop-marks', 'print crop marks')\n    .option(\n      '--bleed <bleed>',\n      'extent of the bleed area for printing with crop marks [3mm]',\n    )\n    .option(\n      '--crop-offset <offset>',\n      'distance between the edge of the trim size and the edge of the media size. [auto (13mm + bleed)]',\n    )\n    .option(\n      '--css <CSS>',\n      'custom style CSS code. (ex: \":root {--my-color: lime;}\")',\n    )\n    .option('--style <stylesheet>', 'additional stylesheet URL or path')\n    .option('--user-style <user_stylesheet>', 'user stylesheet URL or path')\n    .option('-d, --single-doc', 'single HTML document input')\n    .option(\n      '-p, --press-ready',\n      `make generated PDF compatible with press ready PDF/X-1a [false]\nThis option is equivalent with \"--preflight press-ready\"`,\n    )\n    .option(\n      '-t, --timeout <seconds>',\n      `timeout limit for waiting Vivliostyle process [120]`,\n      validateTimeoutFlag,\n    )\n    .option('-T, --theme <theme...>', 'theme path or package name')\n    .option('--title <title>', 'title')\n    .option('--author <author>', 'author')\n    .option('-l, --language <language>', 'language')\n    .addOption(\n      new Option(\n        '--reading-progression <direction>',\n        'Direction of reading progression',\n      ).choices(['ltr', 'rtl']),\n    )\n    .addOption(\n      new Option(\n        '--render-mode <mode>',\n        'if docker is set, Vivliostyle try to render PDF on Docker container [local]',\n      ).choices(['local', 'docker']),\n    )\n    .addOption(\n      new Option(\n        '--preflight <mode>',\n        'apply the process to generate PDF for printing',\n      ).choices(['press-ready', 'press-ready-local']),\n    )\n    .option(\n      '--preflight-option <options...>',\n      `options for preflight process (ex: gray-scale, enforce-outline)\nPlease refer the document of press-ready for further information.\nhttps://github.com/vibranthq/press-ready`,\n    )\n    .addOption(new Option('--sandbox', `launch chrome with sandbox`).hideHelp())\n    .addOption(\n      new Option('--no-sandbox', `launch chrome without sandbox`).hideHelp(),\n    )\n    .option(\n      '--executable-browser <path>',\n      'specify a path of executable browser you installed',\n    )\n    .option('--image <image>', 'specify a docker image to render')\n    .option(\n      '--viewer <URL>',\n      `specify a URL of displaying viewer instead of vivliostyle-cli's one\nIt is useful that using own viewer that has staging features. (ex: https://vivliostyle.vercel.app/)`,\n    )\n    .option(\n      '--viewer-param <parameters>',\n      `specify viewer parameters. (ex: \"allowScripts=false&pixelRatio=16\")`,\n    )\n    // Hide --browser option for now. There's no choice other than Chromium.\n    //     .addOption(\n    //       new commander.Option(\n    //         '--browser <browser>',\n    //         `Specify a browser type to launch Vivliostyle viewer [chromium]\n    // Currently, Firefox and Webkit support preview command only!`,\n    //       ).choices(['chromium', 'firefox', 'webkit']),\n    //     )\n    .addOption(\n      new Option(\n        '--proxy-server <proxyServer>',\n        `HTTP/SOCK proxy server url for underlying Playwright`,\n      ),\n    )\n    .addOption(\n      new Option(\n        '--proxy-bypass <proxyBypass>',\n        `optional comma-separated domains to bypass proxy`,\n      ),\n    )\n    .addOption(\n      new Option(\n        '--proxy-user <proxyUser>',\n        `optional username for HTTP proxy authentication`,\n      ),\n    )\n    .addOption(\n      new Option(\n        '--proxy-pass <proxyPass>',\n        `optional password for HTTP proxy authentication`,\n      ),\n    )\n    .addOption(\n      new Option(\n        '--log-level <level>',\n        'specify a log level of console outputs',\n      )\n        .choices(['silent', 'info', 'verbose', 'debug'])\n        .default('info'),\n    )\n    .addOption(\n      new Option(\n        '--ignore-https-errors',\n        `true to ignore HTTPS errors when Playwright browser opens a new page`,\n      ),\n    )\n    .option('--host <host>', 'IP address the server should listen on')\n    .option('--port <port>', 'port the server should listen on', parseInt)\n    .option('--no-enable-static-serve', 'disable static file serving')\n    .option('--vite-config-file <path>', 'Vite config file path')\n    .option(\n      '--no-vite-config-file',\n      'ignore Vite config file even if it exists',\n    )\n    // TODO: Remove it in the next major version up\n    .addOption(new Option('--executable-chromium <path>').hideHelp())\n    .addOption(new Option('--verbose').hideHelp())\n    .addOption(new Option('--http').hideHelp())\n    .action((_arg, option) => {\n      let invalid = targets.find((it) => !('path' in it));\n      if (invalid) {\n        // -f is an optional option but -o is required one\n        throw new Error(\n          `Couldn't find the output option corresponding --format ${invalid.format} option. Please check the command options.`,\n        );\n      }\n      option.output = targets;\n    });\n\n  return program;\n}\n\nfunction validateTimeoutFlag(val: string) {\n  return Number.isFinite(+val) && +val > 0 ? +val * 1000 : undefined;\n}\n"],"mappings":"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","names":[]}
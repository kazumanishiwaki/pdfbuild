name: Generate PDF Booklets

on:
  workflow_dispatch:
    inputs:
      wp_post_ids:
        description: 'WordPress ページ/投稿ID（カンマ区切り: 123,456,789）'
        required: true
      target_slug:
        description: 'ターゲットとなるページIDまたはスラッグ（任意）'
        required: false
        default: ''
      template_type:
        description: 'テンプレートタイプ（空なら自動判定）'
        required: false
        default: ''
      concurrency:
        description: 'PDF 同時生成数（Vivliostyle安定のため 2〜3 推奨）'
        required: false
        default: '2'
      skip_schema:
        description: 'スキーマ検証をスキップ（1/true でスキップ）'
        required: false
        default: '0'
  # 任意: 定期実行したい場合は有効化
  # schedule:
  #   - cron: '0 3 * * *'   # JSTで正午にしたければ '0 3 * * *'（GitHubはUTC）

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # WordPress 接続先（Secretsに保存）
      WP_URL: ${{ secrets.WP_URL }}
      # WP_USER / WP_PASS は「必要時のみ」JWT発行に使う（公開ページだけなら不要）
      WP_USER: ${{ secrets.WP_USER }}
      WP_PASS: ${{ secrets.WP_PASS }}

      # ビルド設定
      ON_ERROR: "continue"                         # 失敗ページがあっても続行（fetch-acf.js対応）
      CONCURRENCY: ${{ github.event.inputs.concurrency }}
      TEMPLATE_TYPE: ${{ github.event.inputs.template_type }}
      SKIP_SCHEMA: ${{ github.event.inputs.skip_schema }}
      TARGET_SLUG: ${{ github.event.inputs.target_slug }}
      WEBHOOK: ${{ secrets.WP_WEBHOOK_URL }}
      # FTP（任意: WordPress への配布用・既存Secretsを流用）
      FTP_SERVER: ${{ secrets.FTP_SERVER }}
      FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
      FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
      FTP_DESTINATION_PATH: ${{ secrets.FTP_DESTINATION_PATH }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          # cache は lockfile がないと失敗するため一旦無効化
          # cache: 'npm'

      - name: Install deps
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install --no-audit --no-fund
          fi

      - name: Issue JWT if needed
        shell: bash
        run: |
          set -euo pipefail
          if [[ -n "${WP_USER:-}" && -n "${WP_PASS:-}" ]]; then
            echo "🔐 Try issuing JWT..."
            RESP=$(curl -sS -X POST "$WP_URL/wp-json/jwt-auth/v1/token" \
              -H "Content-Type: application/json" \
              -d "{\"username\":\"$WP_USER\",\"password\":\"$WP_PASS\"}") || true
            TOKEN=$(echo "$RESP" | jq -r '.token // empty')
            if [[ -n "$TOKEN" ]]; then
              echo "WP_JWT=$TOKEN" >> "$GITHUB_ENV"
              echo "✅ JWT issued"
            else
              echo "⚠️ JWT not issued (will try without Authorization if possible)"
            fi
          else
            echo "ℹ️ No WP_USER/WP_PASS provided. Will call API without JWT."
          fi

      - name: Fetch ACF JSONs
        env:
          WP_PAGE_IDS: ${{ github.event.inputs.wp_post_ids }}
        run: |
          set -euo pipefail
          echo "🔎 Fetch ACF for: $WP_PAGE_IDS"
          # scripts/fetch-acf.js（分割版） or ルート直下の fetch-acf.js（単体版）のどちらにも対応
          if [ -f scripts/fetch-acf.js ]; then
            node scripts/fetch-acf.js "$WP_PAGE_IDS"
          elif [ -f fetch-acf.js ]; then
            node fetch-acf.js "$WP_PAGE_IDS"
          else
            echo "⚠️ fetch-acf.js が見つからないためダミーデータを生成します"
            node -e '
              const fs = require("fs");
              const ids = (process.env.WP_PAGE_IDS||"").split(",").map(s=>s.trim()).filter(Boolean);
              const id = Number(ids[0]||123);
              const slug = "demo";
              fs.writeFileSync("id-slug-map.json", JSON.stringify({[String(id)]: slug, [slug]: id}, null, 2));
              fs.writeFileSync(`content-${slug}.json`, JSON.stringify({ id, slug, template: "text-photo2", title: "Demo from CI", content: "ダミーデータ（CIフォールバック）。", caption1: "", caption2: "" }, null, 2));
              console.log("wrote id-slug-map.json and content-"+slug+".json");
            '
          fi
          ls -1 content-*.json id-slug-map.json

      - name: Build PDFs (batch)
        run: |
          set -euo pipefail
          # まず Tailwind を一度だけビルド（存在する場合のみ）
          if [ -f ./node_modules/.bin/tailwindcss ] && [ -f ./src/input.css ]; then
            ./node_modules/.bin/tailwindcss -i ./src/input.css -o ./dist/output.css
          fi

          if [ -f scripts/build-batch.js ]; then
            # 分割版（推奨構成）
            node scripts/build-batch.js --pdf --out out
          else
            # 既存単体 build.js を並列制御で回すフォールバック
            test -f id-slug-map.json
            SLUGS=$(jq -r 'to_entries[] | select(.key|test("^[0-9]+$")|not) | .key' id-slug-map.json)
            echo "🧾 Slugs: $SLUGS"
            i=0; max="${CONCURRENCY:-2}"; pids=()
            for slug in $SLUGS; do
              (
                export TEMPLATE_TYPE
                export SLUG="$slug"   # build.js が SLUG or PAGE_ID を読む想定
                node build.js
              ) &
              pids+=($!)
              i=$((i+1))
              if [ "$i" -ge "$max" ]; then
                wait -n || true
                i=$((i-1))
              fi
            done
            for pid in "${pids[@]}"; do wait "$pid" || true; done
          fi

      - name: Normalize filename to page ID (optional)
        if: ${{ env.TARGET_SLUG != '' }}
        run: |
          set -euo pipefail
          ID="${TARGET_SLUG}"
          FIRST=$(ls -1 out/booklet-*.pdf 2>/dev/null | head -n1 || true)
          if [ -n "${FIRST}" ]; then
            cp "${FIRST}" "out/booklet-${ID}.pdf"
            echo "Renamed to out/booklet-${ID}.pdf"
          else
            echo "No PDF found to normalize."
          fi

      - name: List PDFs
        run: ls -lah out/booklet-*.pdf || echo "no PDFs?"

      - name: Stage PDFs for FTP upload (optional)
        run: |
          set -euo pipefail
          mkdir -p deploy
          cp out/booklet-*.pdf deploy/ 2>/dev/null || echo "No PDFs to stage"

      - name: Upload PDFs to WordPress via FTP (optional)
        if: ${{ env.FTP_SERVER != '' && env.FTP_USERNAME != '' && env.FTP_PASSWORD != '' && env.FTP_DESTINATION_PATH != '' }}
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ env.FTP_SERVER }}
          username: ${{ env.FTP_USERNAME }}
          password: ${{ env.FTP_PASSWORD }}
          protocol: ftp
          local-dir: deploy/
          server-dir: ${{ env.FTP_DESTINATION_PATH }}

      - name: Upload PDFs (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: pdf-booklets
          path: |
            out/booklet-*.pdf
          if-no-files-found: warn
          retention-days: 7

      # 任意: S3/R2/SFTP などの配布先へアップロードが必要なら、ここに追加

      - name: Notify WordPress (webhook) - optional
        if: ${{ env.WEBHOOK != '' }}
        env:
          RUN_ID: ${{ github.run_id }}
        run: |
          set -euo pipefail
          # Collect files from out/ but do not fail if none exist
          FILES=$((ls -1 out/booklet-*.pdf 2>/dev/null || true) | jq -R . | jq -s .)
          curl -sS -X POST "$WEBHOOK" \
            -H "Content-Type: application/json" \
            -d "{\"run_id\":\"$RUN_ID\",\"files\":$FILES}"
          echo "📣 Notified: $WEBHOOK"

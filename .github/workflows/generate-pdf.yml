name: Generate PDF Booklets

on:
  workflow_dispatch:
    inputs:
      wp_post_ids:
        description: 'WordPress ページ/投稿ID（カンマ区切り: 123,456,789）'
        required: true
      target_slug:
        description: 'ターゲットとなるページIDまたはスラッグ（任意）'
        required: false
        default: ''
      template_type:
        description: 'テンプレートタイプ（空なら自動判定）'
        required: false
        default: ''
      concurrency:
        description: 'PDF 同時生成数（Vivliostyle安定のため 2〜3 推奨）'
        required: false
        default: '2'
      skip_schema:
        description: 'スキーマ検証をスキップ（1/true でスキップ）'
        required: false
        default: '0'
      allow_dummy:
        description: 'ダミーデータ生成を許可（1/true で許可）'
        required: false
        default: '0'

# 並行実行制御: 同じページIDでの同時実行を防ぐ
concurrency:
  group: pdf-generation-${{ github.event.inputs.wp_post_ids }}
  cancel-in-progress: false

jobs:

  build:
    runs-on: ubuntu-latest
    env:
      WP_URL: ${{ secrets.WP_URL }}
      WP_USER: ${{ secrets.WP_USER }}
      WP_PASS: ${{ secrets.WP_PASS }}
      WP_JWT: ${{ secrets.WP_JWT }}
      WP_BASIC_USER: ${{ secrets.WP_BASIC_USER }}
      WP_BASIC_PASS: ${{ secrets.WP_BASIC_PASS }}
      ON_ERROR: "continue"
      CONCURRENCY: ${{ github.event.inputs.concurrency }}
      TEMPLATE_TYPE: ${{ github.event.inputs.template_type }}
      SKIP_SCHEMA: ${{ github.event.inputs.skip_schema }}
      TARGET_SLUG: ${{ github.event.inputs.target_slug }}
      WEBHOOK: ${{ secrets.WP_WEBHOOK_URL }}
      ALLOW_DUMMY: ${{ github.event.inputs.allow_dummy }}
      FTP_SERVER: ${{ secrets.FTP_SERVER }}
      FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
      FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
      FTP_DESTINATION_PATH: ${{ secrets.FTP_DESTINATION_PATH }}
      RUN_ID: ${{ github.run_id }}
      RUN_NUMBER: ${{ github.run_number }}

    steps:
    
    
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install deps
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install --no-audit --no-fund
          fi

      - name: Setup isolated workspace
        run: |
          echo "🏗️ Setting up isolated workspace for run ${{ github.run_id }}"
          
          # 実行ごとに独立したディレクトリを作成
          WORK_DIR="work-${{ github.run_id }}"
          mkdir -p "$WORK_DIR"/{out,deploy}
          
          # 環境変数として設定
          echo "WORK_DIR=$WORK_DIR" >> "$GITHUB_ENV"
          echo "OUT_DIR=$WORK_DIR/out" >> "$GITHUB_ENV"
          echo "DEPLOY_DIR=$WORK_DIR/deploy" >> "$GITHUB_ENV"
          
          echo "✅ Workspace created: $WORK_DIR"

      - name: Fetch ACF (public first)
        env:
          WP_URL: ${{ env.WP_URL }}
          WP_PAGE_IDS: ${{ github.event.inputs.wp_post_ids }}
          # 認証情報を必要に応じて渡す（公開ページなら不要、非公開なら必要）
          WP_JWT: ${{ env.WP_JWT }}
          WP_BASIC_USER: ${{ env.WP_BASIC_USER }}
          WP_BASIC_PASS: ${{ env.WP_BASIC_PASS }}
          # ダミーデータ生成を無効化（実際のデータのみ使用）
          ALLOW_DUMMY: 0
        run: |
          set -euo pipefail
          echo "🔎 Fetch ACF for: $WP_PAGE_IDS"
          echo "🌐 WordPress URL: $WP_URL"
          echo "🎛️ ALLOW_DUMMY: ${ALLOW_DUMMY:-0}"
          
          # 必須パラメータの確認
          if [ -z "${WP_URL:-}" ]; then
            echo "❌ ERROR: WP_URL is not set!"
            exit 1
          fi
          
          if [ -z "${WP_PAGE_IDS:-}" ]; then
            echo "❌ ERROR: WP_PAGE_IDS is not set!"
            exit 1
          fi
          
          # 認証情報の確認（デバッグ用）
          if [ -n "${WP_JWT:-}" ]; then
            echo "🔐 JWT token available"
          elif [ -n "${WP_BASIC_USER:-}" ] && [ -n "${WP_BASIC_PASS:-}" ]; then
            echo "🔐 Basic auth available"
          else
            echo "🔓 No auth credentials (public access only)"
          fi
          
          # WordPress URLの接続テスト
          echo "🔍 Testing WordPress connection..."
          if curl -s -f "$WP_URL" > /dev/null; then
            echo "✅ WordPress site is accessible"
          else
            echo "❌ WARNING: WordPress site may not be accessible"
          fi
          
          test -f scripts/fetch-acf.js
          
          # fetch-acf.jsの実行（詳細ログ付き）
          echo "🚀 Running fetch-acf.js in workspace: $WORK_DIR"
          cd "$WORK_DIR"
          if node ../scripts/fetch-acf.js "$WP_PAGE_IDS"; then
            echo "✅ fetch-acf.js completed successfully"
          else
            echo "❌ fetch-acf.js failed with exit code $?"
            echo "🔍 This may cause dummy data fallback"
            exit 1
          fi
          
          echo "📄 Generated files:"
          ls -1 content-*.json id-slug-map.json

      - name: Verify content files
        run: |
          echo "📋 Content verification in: $WORK_DIR"
          cd "$WORK_DIR"
          ls -la content-*.json id-slug-map.json 2>/dev/null || echo "⚠️ Content files not found"
          
          # ダミーデータチェック
          if grep -q "Demo Booklet\|ダミーの本文" content-*.json 2>/dev/null; then
            echo "⚠️ WARNING: Dummy data detected!"
          else
            echo "✅ Real WordPress data confirmed"
          fi

      - name: Build PDFs
        run: |
          echo "🏗️ Building PDFs in: $WORK_DIR"
          cd "$WORK_DIR"
          node ../scripts/build-batch.js --pdf --out out

      - name: Verify PDFs generated
        run: |
          echo "📄 Generated PDFs in: $WORK_DIR"
          cd "$WORK_DIR"
          ls -la out/booklet-*.pdf || echo "❌ No PDFs generated"

      - name: Normalize filename to page ID (optional)
        if: ${{ env.TARGET_SLUG != '' }}
        run: |
          set -euo pipefail
          cd "$WORK_DIR"
          ID="${TARGET_SLUG}"
          TARGET_FILE="out/booklet-${ID}.pdf"
          
          # 生成されたPDFファイルを探す
          FIRST=$(ls -1 out/booklet-*.pdf 2>/dev/null | head -n1 || true)
          if [ -n "${FIRST}" ]; then
            # 同じファイル名でない場合のみコピー（上書き）
            if [ "${FIRST}" != "${TARGET_FILE}" ]; then
              cp "${FIRST}" "${TARGET_FILE}"
              echo "📄 Copied ${FIRST} to ${TARGET_FILE}"
            else
              echo "✅ File already has correct name: ${TARGET_FILE}"
            fi
          else
            echo "⚠️ No PDF found to normalize."
          fi

      - name: Stage PDFs for FTP upload
        run: |
          cd "$WORK_DIR"
          mkdir -p deploy
          if ls out/booklet-*.pdf 1> /dev/null 2>&1; then
            cp out/booklet-*.pdf deploy/
            echo "✅ PDFs staged for upload"
          else
            echo "⚠️ No PDFs to upload"
          fi

      - name: Set FTP target directory
        if: ${{ env.FTP_SERVER != '' && env.FTP_USERNAME != '' && env.FTP_PASSWORD != '' }}
        run: |
          set -euo pipefail
          # FTP_DESTINATION_PATHが設定されていない場合はデフォルトを使用
          if [ -n "${FTP_DESTINATION_PATH:-}" ]; then
            dest="${FTP_DESTINATION_PATH%/}/"
          else
            dest="kazumanishiwaki.net/public_html/ks/wp-content/uploads/pdf-booklet/"
            echo "⚠️ FTP_DESTINATION_PATH not set, using default: $dest"
          fi
          echo "FTP_TARGET_DIR=$dest" >> "$GITHUB_ENV"
          echo "🎯 FTP target directory: $dest"



      - name: Upload PDFs to WordPress via FTP
        id: ftp_upload
        if: ${{ env.FTP_SERVER != '' && env.FTP_USERNAME != '' && env.FTP_PASSWORD != '' }}
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ env.FTP_SERVER }}
          username: ${{ env.FTP_USERNAME }}
          password: ${{ env.FTP_PASSWORD }}
          protocol: ftp
          local-dir: ${{ env.WORK_DIR }}/deploy/
          server-dir: ${{ env.FTP_TARGET_DIR }}
          log-level: verbose


      - name: Verify public URL (optional)
        if: ${{ env.WP_URL != '' && env.TARGET_SLUG != '' }}
        run: |
          set -euo pipefail
          URL="${WP_URL%/}/wp-content/uploads/pdf-booklet/booklet-${TARGET_SLUG}.pdf"
          echo "🔍 Checking public URL: $URL"
          code=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
          echo "📡 HTTP response: $code"
          if [ "$code" = "200" ]; then
            echo "✅ PDF is publicly accessible"
          else
            echo "⚠️ PDF not accessible (HTTP $code)"
          fi

      - name: Upload PDFs (artifact)
        if: ${{ hashFiles('work-*/out/booklet-*.pdf') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: pdf-booklets-${{ github.run_id }}
          path: |
            ${{ env.WORK_DIR }}/out/booklet-*.pdf
          if-no-files-found: error
          retention-days: 7

      - name: Report if no PDFs generated
        if: ${{ hashFiles('work-*/out/booklet-*.pdf') == '' }}
        run: echo "⚠️ No PDF files were generated"

      - name: Notify WordPress (webhook) - optional
        if: ${{ env.WEBHOOK != '' }}
        env:
          RUN_ID: ${{ github.run_id }}
        run: |
          set -euo pipefail
          cd "$WORK_DIR"
          echo "📣 Sending webhook notification..."
          # Collect files from out/ but do not fail if none exist
          FILES=$((ls -1 out/booklet-*.pdf 2>/dev/null || true) | jq -R . | jq -s .)
          curl -sS -X POST "$WEBHOOK" \
            -H "Content-Type: application/json" \
            -d "{\"run_id\":\"$RUN_ID\",\"files\":$FILES}"
          echo "✅ Webhook sent to: $WEBHOOK"

      - name: Cleanup workspace
        if: always()
        run: |
          echo "🧹 Cleaning up workspace: $WORK_DIR"
          if [ -d "$WORK_DIR" ]; then
            rm -rf "$WORK_DIR"
            echo "✅ Workspace cleaned up"
          else
            echo "ℹ️ No workspace to clean"
          fi
name: Generate PDF Booklets

on:
  workflow_dispatch:
    inputs:
      wp_post_ids:
        description: 'WordPress ページ/投稿ID（カンマ区切り: 123,456,789）'
        required: true
      target_slug:
        description: 'ターゲットとなるページIDまたはスラッグ（任意）'
        required: false
        default: ''
      template_type:
        description: 'テンプレートタイプ（空なら自動判定）'
        required: false
        default: ''
      concurrency:
        description: 'PDF 同時生成数（Vivliostyle安定のため 2〜3 推奨）'
        required: false
        default: '2'
      skip_schema:
        description: 'スキーマ検証をスキップ（1/true でスキップ）'
        required: false
        default: '0'
      allow_dummy:
        description: 'ダミーデータ生成を許可（1/true で許可）'
        required: false
        default: '0'

jobs:

  build:
    runs-on: ubuntu-latest
    env:
      WP_URL: ${{ secrets.WP_URL }}
      WP_USER: ${{ secrets.WP_USER }}
      WP_PASS: ${{ secrets.WP_PASS }}
      WP_JWT: ${{ secrets.WP_JWT }}
      WP_BASIC_USER: ${{ secrets.WP_BASIC_USER }}
      WP_BASIC_PASS: ${{ secrets.WP_BASIC_PASS }}
      ON_ERROR: "continue"
      CONCURRENCY: ${{ github.event.inputs.concurrency }}
      TEMPLATE_TYPE: ${{ github.event.inputs.template_type }}
      SKIP_SCHEMA: ${{ github.event.inputs.skip_schema }}
      TARGET_SLUG: ${{ github.event.inputs.target_slug }}
      WEBHOOK: ${{ secrets.WP_WEBHOOK_URL }}
      ALLOW_DUMMY: ${{ github.event.inputs.allow_dummy }}
      FTP_SERVER: ${{ secrets.FTP_SERVER }}
      FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
      FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
      FTP_DESTINATION_PATH: ${{ secrets.FTP_DESTINATION_PATH }}

    steps:
    
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install deps
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install --no-audit --no-fund
          fi

      - name: Clean previous files
        run: |
          echo "🧹 Cleaning previous generated files..."
          rm -f content-*.json id-slug-map.json out/booklet-*.html out/booklet-*.pdf
          echo "✅ Cleanup completed"

      - name: Fetch ACF (public first)
        env:
          WP_URL: ${{ env.WP_URL }}
          WP_PAGE_IDS: ${{ github.event.inputs.wp_post_ids }}
          # 認証情報を必要に応じて渡す（公開ページなら不要、非公開なら必要）
          WP_JWT: ${{ env.WP_JWT }}
          WP_BASIC_USER: ${{ env.WP_BASIC_USER }}
          WP_BASIC_PASS: ${{ env.WP_BASIC_PASS }}
          # ダミーデータ生成を無効化（実際のデータのみ使用）
          ALLOW_DUMMY: 0
        run: |
          set -euo pipefail
          echo "🔎 Fetch ACF for: $WP_PAGE_IDS"
          echo "🌐 WordPress URL: $WP_URL"
          echo "🎛️ ALLOW_DUMMY: ${ALLOW_DUMMY:-0}"
          
          # 必須パラメータの確認
          if [ -z "${WP_URL:-}" ]; then
            echo "❌ ERROR: WP_URL is not set!"
            exit 1
          fi
          
          if [ -z "${WP_PAGE_IDS:-}" ]; then
            echo "❌ ERROR: WP_PAGE_IDS is not set!"
            exit 1
          fi
          
          # 認証情報の確認（デバッグ用）
          if [ -n "${WP_JWT:-}" ]; then
            echo "🔐 JWT token available"
          elif [ -n "${WP_BASIC_USER:-}" ] && [ -n "${WP_BASIC_PASS:-}" ]; then
            echo "🔐 Basic auth available"
          else
            echo "🔓 No auth credentials (public access only)"
          fi
          
          # WordPress URLの接続テスト
          echo "🔍 Testing WordPress connection..."
          if curl -s -f "$WP_URL" > /dev/null; then
            echo "✅ WordPress site is accessible"
          else
            echo "❌ WARNING: WordPress site may not be accessible"
          fi
          
          test -f scripts/fetch-acf.js
          
          # fetch-acf.jsの実行（詳細ログ付き）
          echo "🚀 Running fetch-acf.js..."
          if node scripts/fetch-acf.js "$WP_PAGE_IDS"; then
            echo "✅ fetch-acf.js completed successfully"
          else
            echo "❌ fetch-acf.js failed with exit code $?"
            echo "🔍 This may cause dummy data fallback"
            exit 1
          fi
          
          echo "📄 Generated files:"
          ls -1 content-*.json id-slug-map.json

      - name: Debug fetched content
        run: |
          echo "🔍 Checking fetched content for dummy data..."
          
          # id-slug-map.jsonの内容確認
          if [ -f id-slug-map.json ]; then
            echo "📋 ID-Slug mapping:"
            cat id-slug-map.json | jq .
          else
            echo "❌ id-slug-map.json not found!"
          fi
          
          # content-*.jsonファイルの確認
          for file in content-*.json; do
            if [ -f "$file" ]; then
              echo ""
              echo "📄 ===== Content file: $file ====="
              
              # ファイル全体の内容を表示
              echo "📝 Complete file contents:"
              cat "$file" | jq . || cat "$file"
              
              echo ""
              echo "🔍 Data analysis:"
              
              # 各フィールドの詳細確認
              echo "   ID: $(cat "$file" | jq -r '.id // "N/A"')"
              echo "   Slug: $(cat "$file" | jq -r '.slug // "N/A"')"
              echo "   Title: $(cat "$file" | jq -r '.title // "N/A"')"
              echo "   Template: $(cat "$file" | jq -r '.template // "N/A"')"
              
              # コンテンツの確認
              CONTENT=$(cat "$file" | jq -r '.content // "N/A"')
              echo "   Content length: ${#CONTENT} characters"
              echo "   Content preview: ${CONTENT:0:200}..."
              
              # 画像の確認
              PHOTO1=$(cat "$file" | jq -r '.photo1.url // .photo1 // "N/A"')
              PHOTO2=$(cat "$file" | jq -r '.photo2.url // .photo2 // "N/A"')
              echo "   Photo1 URL: $PHOTO1"
              echo "   Photo2 URL: $PHOTO2"
              
              # キャプションの確認
              echo "   Caption1: $(cat "$file" | jq -r '.caption1 // "N/A"')"
              echo "   Caption2: $(cat "$file" | jq -r '.caption2 // "N/A"')"
              
              # ダミーデータかどうかチェック
              if grep -q "Demo Booklet\|ダミーの本文" "$file"; then
                echo "⚠️ WARNING: $file contains DUMMY data!"
              else
                echo "✅ $file appears to contain real WordPress data"
              fi
              
              echo "📄 ===== End of $file ====="
            else
              echo "❌ No content-*.json files found!"
            fi
          done

      - name: Build PDFs
        run: |
          set -euo pipefail
          echo "🏗️ Starting PDF build process..."
          
          # ビルドスクリプトの存在確認
          if [ -f scripts/build-batch.js ]; then
            echo "✅ Found build-batch.js"
          else
            echo "❌ build-batch.js not found, checking alternatives..."
            ls -la scripts/
          fi
          
          # 入力ファイルの確認
          echo "📄 Input files check:"
          if [ -f id-slug-map.json ]; then
            echo "✅ id-slug-map.json exists"
            echo "   Content: $(cat id-slug-map.json)"
          else
            echo "❌ id-slug-map.json missing"
          fi
          
          echo "📄 Content files:"
          ls -la content-*.json || echo "❌ No content-*.json files found"
          
          # Tailwindの確認
          if [ -f ./node_modules/.bin/tailwindcss ] && [ -f ./src/input.css ]; then
            echo "🎨 Building Tailwind CSS..."
            ./node_modules/.bin/tailwindcss -i ./src/input.css -o ./dist/output.css
            echo "✅ Tailwind CSS built"
          else
            echo "ℹ️ Tailwind CSS not available (optional)"
          fi
          
          # PDF生成実行
          if [ -f scripts/build-batch.js ]; then
            echo "🚀 Running PDF generation..."
            echo "   Command: node scripts/build-batch.js --pdf --out out"
            
            # Node.jsとnpmの確認
            echo "🔧 Environment check:"
            echo "   Node version: $(node --version)"
            echo "   NPM version: $(npm --version)"
            
            # 依存関係の確認
            echo "📦 Dependencies check:"
            if [ -f package.json ]; then
              echo "   package.json exists"
              echo "   Dependencies:"
              cat package.json | jq '.dependencies // {}' 2>/dev/null || echo "   Could not parse dependencies"
            fi
            
            # build-one.jsの確認
            if [ -f scripts/build-one.js ]; then
              echo "✅ scripts/build-one.js exists"
            else
              echo "❌ scripts/build-one.js missing - this is required by build-batch.js"
            fi
            
            # 実行
            if node scripts/build-batch.js --pdf --out out; then
              echo "✅ PDF generation command completed successfully"
            else
              echo "❌ PDF generation failed with exit code $?"
              echo "🔍 Debugging info:"
              echo "   Current directory: $(pwd)"
              echo "   Available files:"
              ls -la
              echo "   Scripts directory:"
              ls -la scripts/
              exit 1
            fi
          else
            echo "❌ Cannot run PDF generation - build-batch.js missing"
            exit 1
          fi

      - name: List generated PDFs
        run: |
          echo "📄 Checking PDF generation results..."
          
          # outディレクトリの確認
          if [ -d out ]; then
            echo "✅ out/ directory exists"
            echo "📁 Contents of out/ directory:"
            ls -lah out/ || echo "out/ directory is empty"
          else
            echo "❌ out/ directory does not exist"
          fi
          
          # PDF ファイルの確認
          echo "🔍 Looking for PDF files..."
          if ls out/booklet-*.pdf 1> /dev/null 2>&1; then
            echo "✅ PDF files found:"
            for pdf in out/booklet-*.pdf; do
              if [ -f "$pdf" ]; then
                size=$(stat -f%z "$pdf" 2>/dev/null || stat -c%s "$pdf" 2>/dev/null || echo "unknown")
                echo "   📄 $pdf (${size} bytes)"
                
                # PDFファイルの妥当性チェック
                if [ "$size" -gt 1000 ]; then
                  echo "      ✅ File size looks reasonable"
                else
                  echo "      ⚠️ File size seems too small"
                  echo "      Content preview:"
                  head -c 200 "$pdf" | hexdump -C
                fi
              fi
            done
          else
            echo "❌ No PDF files found"
            echo "🔍 Checking for any files in out/:"
            find out -type f -name "*" 2>/dev/null || echo "No files found in out/"
            
            echo "🔍 Checking for HTML files (intermediate):"
            find . -name "*.html" -newer id-slug-map.json 2>/dev/null || echo "No recent HTML files found"
          fi

      - name: Normalize filename to page ID (optional)
        if: ${{ env.TARGET_SLUG != '' }}
        run: |
          set -euo pipefail
          ID="${TARGET_SLUG}"
          TARGET_FILE="out/booklet-${ID}.pdf"
          
          # 生成されたPDFファイルを探す
          FIRST=$(ls -1 out/booklet-*.pdf 2>/dev/null | head -n1 || true)
          if [ -n "${FIRST}" ]; then
            # 同じファイル名でない場合のみコピー（上書き）
            if [ "${FIRST}" != "${TARGET_FILE}" ]; then
              cp "${FIRST}" "${TARGET_FILE}"
              echo "📄 Copied ${FIRST} to ${TARGET_FILE}"
            else
              echo "✅ File already has correct name: ${TARGET_FILE}"
            fi
          else
            echo "⚠️ No PDF found to normalize."
          fi

      - name: Stage PDFs for FTP upload
        run: |
          set -euo pipefail
          mkdir -p deploy
          shopt -s nullglob
          files=(out/booklet-*.pdf)
          if [ ${#files[@]} -gt 0 ]; then
            cp out/booklet-*.pdf deploy/
            echo "UPLOAD_HAS_FILES=1" >> "$GITHUB_ENV"
            echo "📦 Staged ${#files[@]} PDF(s) for upload:"
            ls -lah deploy/
          else
            echo "⚠️ No PDFs to stage"
            echo "UPLOAD_HAS_FILES=0" >> "$GITHUB_ENV"
          fi

      - name: Set FTP target directory
        if: ${{ env.FTP_SERVER != '' && env.FTP_USERNAME != '' && env.FTP_PASSWORD != '' && env.FTP_DESTINATION_PATH != '' }}
        run: |
          set -euo pipefail
          dest="${FTP_DESTINATION_PATH%/}/"
          echo "FTP_TARGET_DIR=$dest" >> "$GITHUB_ENV"
          echo "🎯 FTP target directory: $dest"

      - name: Upload PDFs to WordPress via FTP
        if: ${{ env.FTP_SERVER != '' && env.FTP_USERNAME != '' && env.FTP_PASSWORD != '' && env.FTP_TARGET_DIR != '' && env.UPLOAD_HAS_FILES == '1' }}
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ env.FTP_SERVER }}
          username: ${{ env.FTP_USERNAME }}
          password: ${{ env.FTP_PASSWORD }}
          protocol: ftp
          local-dir: deploy/
          server-dir: ${{ env.FTP_TARGET_DIR }}
          log-level: verbose

      - name: Verify public URL (optional)
        if: ${{ env.WP_URL != '' && env.TARGET_SLUG != '' }}
        run: |
          set -euo pipefail
          URL="${WP_URL%/}/wp-content/uploads/pdf-booklet/booklet-${TARGET_SLUG}.pdf"
          echo "🔍 Checking public URL: $URL"
          code=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
          echo "📡 HTTP response: $code"
          if [ "$code" = "200" ]; then
            echo "✅ PDF is publicly accessible"
          else
            echo "⚠️ PDF not accessible (HTTP $code)"
          fi

      - name: Upload PDFs (artifact)
        if: ${{ hashFiles('out/booklet-*.pdf') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: pdf-booklets
          path: |
            out/booklet-*.pdf
          if-no-files-found: error
          retention-days: 7

      - name: Report if no PDFs generated
        if: ${{ hashFiles('out/booklet-*.pdf') == '' }}
        run: |
          echo "⚠️ No PDF files were generated"
          echo "🔍 This indicates a problem in the PDF generation process"
          echo "📁 Current out/ directory contents:"
          ls -la out/ || echo "out/ directory does not exist"
          echo "📄 Available files in workspace:"
          find . -name "*.json" -o -name "*.html" -o -name "*.pdf" | head -20

      - name: Notify WordPress (webhook) - optional
        if: ${{ env.WEBHOOK != '' }}
        env:
          RUN_ID: ${{ github.run_id }}
        run: |
          set -euo pipefail
          echo "📣 Sending webhook notification..."
          # Collect files from out/ but do not fail if none exist
          FILES=$((ls -1 out/booklet-*.pdf 2>/dev/null || true) | jq -R . | jq -s .)
          curl -sS -X POST "$WEBHOOK" \
            -H "Content-Type: application/json" \
            -d "{\"run_id\":\"$RUN_ID\",\"files\":$FILES}"
          echo "✅ Webhook sent to: $WEBHOOK"